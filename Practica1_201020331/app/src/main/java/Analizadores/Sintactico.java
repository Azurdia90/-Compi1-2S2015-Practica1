
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Analizadores;

import java.util.ArrayList;

import Figuras.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tabla_simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\004\000\002\005\014\000\002\005\014" +
    "\000\002\005\016\000\002\005\016\000\002\005\020\000" +
    "\002\004\003\000\002\006\003\000\002\007\003\000\002" +
    "\010\003\000\002\011\003\000\002\012\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\016\005\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\004\004\005\001\002\000\004\002\142\001" +
    "\002\000\014\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\001\002\000\004\002\000\001\002\000\014\005\014\006" +
    "\013\007\010\010\022\011\011\001\002\000\004\012\ufff5" +
    "\001\002\000\004\012\ufff3\001\002\000\004\012\127\001" +
    "\002\000\004\012\ufff6\001\002\000\004\012\ufff7\001\002" +
    "\000\004\012\114\001\002\000\004\012\077\001\002\000" +
    "\006\002\ufffe\004\005\001\002\000\004\012\065\001\002" +
    "\000\004\012\023\001\002\000\004\012\ufff4\001\002\000" +
    "\010\012\033\013\024\014\026\001\002\000\012\017\uffea" +
    "\020\uffea\021\uffea\032\uffea\001\002\000\012\017\uffeb\020" +
    "\uffeb\021\uffeb\032\uffeb\001\002\000\012\017\uffe9\020\uffe9" +
    "\021\uffe9\032\uffe9\001\002\000\012\017\uffed\020\uffed\021" +
    "\uffed\032\uffed\001\002\000\012\017\060\020\061\021\ufff0" +
    "\032\ufff0\001\002\000\006\015\056\016\055\001\002\000" +
    "\004\021\036\001\002\000\010\012\033\013\024\014\026" +
    "\001\002\000\004\032\035\001\002\000\012\017\uffec\020" +
    "\uffec\021\uffec\032\uffec\001\002\000\010\012\033\013\024" +
    "\014\026\001\002\000\004\021\040\001\002\000\010\012" +
    "\033\013\024\014\026\001\002\000\004\021\042\001\002" +
    "\000\022\022\050\023\047\024\053\025\045\026\046\027" +
    "\051\030\044\031\052\001\002\000\004\032\054\001\002" +
    "\000\004\032\uffe2\001\002\000\004\032\uffe5\001\002\000" +
    "\004\032\uffe4\001\002\000\004\032\uffe7\001\002\000\004" +
    "\032\uffe8\001\002\000\004\032\uffe3\001\002\000\004\032" +
    "\uffe1\001\002\000\004\032\uffe6\001\002\000\006\002\ufffc" +
    "\004\ufffc\001\002\000\010\012\033\013\024\014\026\001" +
    "\002\000\010\012\033\013\024\014\026\001\002\000\012" +
    "\017\060\020\061\021\ufff2\032\ufff2\001\002\000\010\012" +
    "\033\013\024\014\026\001\002\000\010\012\033\013\024" +
    "\014\026\001\002\000\012\017\uffee\020\uffee\021\uffee\032" +
    "\uffee\001\002\000\012\017\uffef\020\uffef\021\uffef\032\uffef" +
    "\001\002\000\012\017\060\020\061\021\ufff1\032\ufff1\001" +
    "\002\000\010\012\033\013\024\014\026\001\002\000\004" +
    "\021\067\001\002\000\010\012\033\013\024\014\026\001" +
    "\002\000\004\021\071\001\002\000\010\012\033\013\024" +
    "\014\026\001\002\000\004\021\073\001\002\000\022\022" +
    "\050\023\047\024\053\025\045\026\046\027\051\030\044" +
    "\031\052\001\002\000\004\032\075\001\002\000\006\002" +
    "\ufffd\004\ufffd\001\002\000\004\002\uffff\001\002\000\010" +
    "\012\033\013\024\014\026\001\002\000\004\021\101\001" +
    "\002\000\010\012\033\013\024\014\026\001\002\000\004" +
    "\021\103\001\002\000\010\012\033\013\024\014\026\001" +
    "\002\000\004\021\105\001\002\000\010\012\033\013\024" +
    "\014\026\001\002\000\004\021\107\001\002\000\010\012" +
    "\033\013\024\014\026\001\002\000\004\021\111\001\002" +
    "\000\022\022\050\023\047\024\053\025\045\026\046\027" +
    "\051\030\044\031\052\001\002\000\004\032\113\001\002" +
    "\000\006\002\ufff9\004\ufff9\001\002\000\010\012\033\013" +
    "\024\014\026\001\002\000\004\021\116\001\002\000\010" +
    "\012\033\013\024\014\026\001\002\000\004\021\120\001" +
    "\002\000\010\012\033\013\024\014\026\001\002\000\004" +
    "\021\122\001\002\000\010\012\033\013\024\014\026\001" +
    "\002\000\004\021\124\001\002\000\022\022\050\023\047" +
    "\024\053\025\045\026\046\027\051\030\044\031\052\001" +
    "\002\000\004\032\126\001\002\000\006\002\ufffa\004\ufffa" +
    "\001\002\000\010\012\033\013\024\014\026\001\002\000" +
    "\004\021\131\001\002\000\010\012\033\013\024\014\026" +
    "\001\002\000\004\021\133\001\002\000\010\012\033\013" +
    "\024\014\026\001\002\000\004\021\135\001\002\000\010" +
    "\012\033\013\024\014\026\001\002\000\004\021\137\001" +
    "\002\000\022\022\050\023\047\024\053\025\045\026\046" +
    "\027\051\030\044\031\052\001\002\000\004\032\141\001" +
    "\002\000\006\002\ufffb\004\ufffb\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\010\002\003\003\005\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\016\006\017\007\020\010\011\011\014\012\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\075\004\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\031\014\030\015\027\016\026\017\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\033\014\030\015\027\016\026\017\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\036" +
    "\014\030\015\027\016\026\017\024\001\001\000\002\001" +
    "\001\000\014\013\040\014\030\015\027\016\026\017\024" +
    "\001\001\000\002\001\001\000\004\020\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\063\016\026\017\024\001\001\000\010\015" +
    "\056\016\026\017\024\001\001\000\002\001\001\000\006" +
    "\016\062\017\024\001\001\000\006\016\061\017\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\065\014\030\015\027\016\026\017\024\001" +
    "\001\000\002\001\001\000\014\013\067\014\030\015\027" +
    "\016\026\017\024\001\001\000\002\001\001\000\014\013" +
    "\071\014\030\015\027\016\026\017\024\001\001\000\002" +
    "\001\001\000\004\020\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\077\014\030" +
    "\015\027\016\026\017\024\001\001\000\002\001\001\000" +
    "\014\013\101\014\030\015\027\016\026\017\024\001\001" +
    "\000\002\001\001\000\014\013\103\014\030\015\027\016" +
    "\026\017\024\001\001\000\002\001\001\000\014\013\105" +
    "\014\030\015\027\016\026\017\024\001\001\000\002\001" +
    "\001\000\014\013\107\014\030\015\027\016\026\017\024" +
    "\001\001\000\002\001\001\000\004\020\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\114\014\030" +
    "\015\027\016\026\017\024\001\001\000\002\001\001\000" +
    "\014\013\116\014\030\015\027\016\026\017\024\001\001" +
    "\000\002\001\001\000\014\013\120\014\030\015\027\016" +
    "\026\017\024\001\001\000\002\001\001\000\014\013\122" +
    "\014\030\015\027\016\026\017\024\001\001\000\002\001" +
    "\001\000\004\020\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\127\014\030\015\027\016\026\017" +
    "\024\001\001\000\002\001\001\000\014\013\131\014\030" +
    "\015\027\016\026\017\024\001\001\000\002\001\001\000" +
    "\014\013\133\014\030\015\027\016\026\017\024\001\001" +
    "\000\002\001\001\000\014\013\135\014\030\015\027\016" +
    "\026\017\024\001\001\000\002\001\001\000\004\020\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

private boolean correcto = false;

//listas de los figuras encontradas
ArrayList<Circulo> lista_circulos;
ArrayList<Cuadrado> lista_cuadrados;
ArrayList<Rectangulo> lista_rectangulos;
ArrayList<Linea> lista_lineas;
ArrayList<Poligono> lista_poligonos;

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s){ 
 System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
 System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido."); 
} 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GRAFICAS 
            {
              Object RESULT =null;
		parser.correcto = true;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GRAFICAS ::= GRAFICA FIGURAS GRAFICAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GRAFICAS ::= GRAFICA FIGURAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FIGURAS ::= CIRCULO s_parentesisa OPERACION s_coma OPERACION s_coma OPERACION s_coma COLOR s_parentesisc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIGURAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FIGURAS ::= CUADRADO s_parentesisa OPERACION s_coma OPERACION s_coma OPERACION s_coma COLOR s_parentesisc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIGURAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FIGURAS ::= RECTANGULO s_parentesisa OPERACION s_coma OPERACION s_coma OPERACION s_coma OPERACION s_coma COLOR s_parentesisc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIGURAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FIGURAS ::= LINEA s_parentesisa OPERACION s_coma OPERACION s_coma OPERACION s_coma OPERACION s_coma COLOR s_parentesisc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIGURAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FIGURAS ::= POLIGONO s_parentesisa OPERACION s_coma OPERACION s_coma OPERACION s_coma OPERACION s_coma OPERACION s_coma COLOR s_parentesisc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIGURAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GRAFICA ::= r_graficar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CIRCULO ::= r_circulo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CIRCULO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUADRADO ::= r_cuadrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUADRADO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RECTANGULO ::= r_rectangulo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RECTANGULO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINEA ::= r_linea 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // POLIGONO ::= r_poligono 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POLIGONO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPERACION ::= OPERANDOA s_suma OPERANDOB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERACION ::= OPERANDOA s_resta OPERANDOB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERACION ::= OPERANDOB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERANDOB ::= OPERANDOB s_multiplicacion OPERANDOC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOB",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERANDOB ::= OPERANDOB s_division OPERANDOC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOB",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERANDOB ::= OPERANDOC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOB",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERANDOC ::= s_parentesisa OPERACION s_parentesisc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOC",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERANDOC ::= OPERANDOF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOC",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERANDOF ::= numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOF",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERANDOF ::= numero_entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOF",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COLOR ::= r_azul 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COLOR ::= r_rojo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COLOR ::= r_verde 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COLOR ::= r_amarillo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COLOR ::= r_naranja 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COLOR ::= r_morado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COLOR ::= r_cafe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COLOR ::= r_negro 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
